#!/usr/bin/env python3
"""
Simple Deep Listening Bot - MVP –≤–µ—Ä—Å–∏—è

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
- –£—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ 8:00
- 1 –º–∏–Ω—É—Ç–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
- –í–æ–ø—Ä–æ—Å "–ß—Ç–æ —Ç—ã —É—Å–ª—ã—à–∞–ª?"
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ (—Ç–µ–∫—Å—Ç –∏–ª–∏ –∞—É–¥–∏–æ)
"""

import os
import logging
import asyncio
from datetime import datetime, time, timedelta
from typing import Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from dotenv import load_dotenv
import requests
import json

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class SimpleListeningBot:
    def __init__(self):
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.supabase_url = os.getenv('SUPABASE_URL')
        self.supabase_key = os.getenv('SUPABASE_ANON_KEY')
        
        if not all([self.bot_token, self.supabase_url, self.supabase_key]):
            raise ValueError("–ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è Supabase API
        self.headers = {
            'apikey': self.supabase_key,
            'Authorization': f'Bearer {self.supabase_key}',
            'Content-Type': 'application/json',
            'Prefer': 'return=minimal'
        }
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
        self.application = Application.builder().token(self.bot_token).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("listen", self.start_listening))
        self.application.add_handler(CommandHandler("stats", self.show_stats))
        
        # Callback –∫–Ω–æ–ø–∫–∏
        self.application.add_handler(CallbackQueryHandler(self.button_handler))
        
        # –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.application.add_handler(MessageHandler(filters.VOICE, self.handle_voice))
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await self.register_user(user.id, user.username, user.first_name)
        
        welcome_text = """
üéß –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Deep Listening Bot!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞–∑–≤–∏—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Å–ª—É—à–∞–Ω–∏—è.

üåÖ –ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 8:00 —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º:
‚Ä¢ –ü–æ—Å–ª—É—à–∞—Ç—å –º–∏—Ä –≤–æ–∫—Ä—É–≥ 1 –º–∏–Ω—É—Ç—É
‚Ä¢ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ç–µ–º, —á—Ç–æ –≤—ã —É—Å–ª—ã—à–∞–ª–∏

–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?
        """
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üéß –ù–∞—á–∞—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É", callback_data="start_practice")],
            [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç", callback_data="how_it_works")]
        ])
        
        await update.message.reply_text(welcome_text, reply_markup=keyboard)
    
    async def register_user(self, user_id: int, username: str, first_name: str):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_data = {
            'telegram_user_id': user_id,
            'username': username,
            'first_name': first_name,
            'morning_reminder_enabled': True,
            'morning_time': '08:00:00',
            'timezone': 'UTC'
        }
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º upsert –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        api_url = f"{self.supabase_url}/rest/v1/listening_users"
        headers = {**self.headers, 'Prefer': 'resolution=merge-duplicates'}
        
        try:
            response = requests.post(api_url, headers=headers, data=json.dumps(user_data))
            if response.status_code in [200, 201]:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {response.status_code} - {response.text}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    async def start_listening(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∏–Ω–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è"""
        user_id = update.effective_user.id
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
        session_id = await self.create_listening_session(user_id)
        if session_id:
            context.user_data['current_session'] = session_id
            
            text = """
üéß –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∞–∫—Ç–∏–∫—É –≥–ª—É–±–æ–∫–æ–≥–æ —Å–ª—É—à–∞–Ω–∏—è!

üìç –ù–∞–π–¥–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –º–µ—Å—Ç–æ
üëÇ –ó–∞–∫—Ä–æ–π—Ç–µ –≥–ª–∞–∑–∞ –∏–ª–∏ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å
‚è∞ –°–ª—É—à–∞–π—Ç–µ –∑–≤—É–∫–∏ –≤–æ–∫—Ä—É–≥ –≤–∞—Å —Ä–æ–≤–Ω–æ 1 –º–∏–Ω—É—Ç—É

–Ø –Ω–∞–ø–æ–º–Ω—é, –∫–æ–≥–¥–∞ –≤—Ä–µ–º—è –≤—ã–π–¥–µ—Ç.
–ù–∞–∂–º–∏—Ç–µ "–ì–æ—Ç–æ–≤", –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å.
            """
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å", callback_data="ready_to_listen")]
            ])
            
            await update.message.reply_text(text, reply_markup=keyboard)
        else:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def create_listening_session(self, user_id: int) -> Optional[str]:
        """–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è"""
        session_data = {
            'user_id': user_id,
            'session_date': datetime.now().date().isoformat(),
            'session_time': datetime.now().time().isoformat(),
            'status': 'started'
        }
        
        api_url = f"{self.supabase_url}/rest/v1/listening_sessions"
        headers = {**self.headers, 'Prefer': 'return=representation'}
        
        try:
            response = requests.post(api_url, headers=headers, data=json.dumps(session_data))
            if response.status_code in [200, 201]:
                result = response.json()
                if result and len(result) > 0:
                    return result[0]['id']
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {response.status_code} - {response.text}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
        
        return None
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "start_practice":
            await self.start_listening_from_callback(query, context)
        elif query.data == "ready_to_listen":
            await self.start_timer(query, context)
        elif query.data == "show_stats":
            await self.show_stats_from_callback(query, context)
        elif query.data == "how_it_works":
            await self.show_how_it_works(query, context)
    
    async def start_listening_from_callback(self, query, context):
        """–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∏–∑ callback"""
        user_id = query.from_user.id
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
        session_id = await self.create_listening_session(user_id)
        if session_id:
            context.user_data['current_session'] = session_id
            
            text = """
üéß –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∞–∫—Ç–∏–∫—É –≥–ª—É–±–æ–∫–æ–≥–æ —Å–ª—É—à–∞–Ω–∏—è!

üìç –ù–∞–π–¥–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –º–µ—Å—Ç–æ
üëÇ –ó–∞–∫—Ä–æ–π—Ç–µ –≥–ª–∞–∑–∞ –∏–ª–∏ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å  
‚è∞ –°–ª—É—à–∞–π—Ç–µ –∑–≤—É–∫–∏ –≤–æ–∫—Ä—É–≥ –≤–∞—Å —Ä–æ–≤–Ω–æ 1 –º–∏–Ω—É—Ç—É

–ù–∞–∂–º–∏—Ç–µ "–ì–æ—Ç–æ–≤", –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å.
            """
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å", callback_data="ready_to_listen")]
            ])
            
            await query.edit_message_text(text, reply_markup=keyboard)
    
    async def start_timer(self, query, context):
        """–ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 1 –º–∏–Ω—É—Ç—É"""
        text = """
üéß –ü—Ä–∞–∫—Ç–∏–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å!

üëÇ –°–ª—É—à–∞–π—Ç–µ –∑–≤—É–∫–∏ –≤–æ–∫—Ä—É–≥ –≤–∞—Å...
‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: 1 –º–∏–Ω—É—Ç–∞

–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ —Ç–æ–º, —á—Ç–æ —Å–ª—ã—à–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.
        """
        
        await query.edit_message_text(text)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 60 —Å–µ–∫—É–Ω–¥
        context.job_queue.run_once(
            self.timer_finished, 
            60, 
            chat_id=query.message.chat_id,
            user_id=query.from_user.id,
            data={'session_id': context.user_data.get('current_session')}
        )
    
    async def timer_finished(self, context: ContextTypes.DEFAULT_TYPE):
        """–¢–∞–π–º–µ—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è - –∑–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å"""
        chat_id = context.job.chat_id
        user_id = context.job.user_id
        
        text = """
‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ!

ü§î –ß—Ç–æ –≤—ã —É—Å–ª—ã—à–∞–ª–∏?

–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏:
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º
‚Ä¢ –ò–ª–∏ –∑–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, —á—Ç–æ –∂–¥–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
        if 'user_sessions' not in context.bot_data:
            context.bot_data['user_sessions'] = {}
        
        context.bot_data['user_sessions'][user_id] = {
            'session_id': context.job.data['session_id'],
            'waiting_for_answer': True
        }
        
        await context.bot.send_message(chat_id=chat_id, text=text)
    
    async def handle_voice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥–µ–º –ª–∏ –º—ã –æ—Ç–≤–µ—Ç –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (context.bot_data.get('user_sessions', {}).get(user_id, {}).get('waiting_for_answer')):
            session_id = context.bot_data['user_sessions'][user_id]['session_id']
            voice_file_id = update.message.voice.file_id
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç
            await self.save_voice_answer(session_id, voice_file_id)
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
            await self.complete_session(session_id)
            
            # –£–±–∏—Ä–∞–µ–º –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è
            context.bot_data['user_sessions'][user_id]['waiting_for_answer'] = False
            
            await update.message.reply_text(
                "üéôÔ∏è –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç! –ü—Ä–∞–∫—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n"
                "–£–≤–∏–¥–∏–º—Å—è –∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º –≤ 8:00! üåÖ"
            )
        else:
            await update.message.reply_text(
                "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥–æ–π /listen –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ üéß –ù–∞—á–∞—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É"
            )
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥–µ–º –ª–∏ –º—ã –æ—Ç–≤–µ—Ç –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (context.bot_data.get('user_sessions', {}).get(user_id, {}).get('waiting_for_answer')):
            session_id = context.bot_data['user_sessions'][user_id]['session_id']
            text_answer = update.message.text
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            await self.save_text_answer(session_id, text_answer)
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
            await self.complete_session(session_id)
            
            # –£–±–∏—Ä–∞–µ–º –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è
            context.bot_data['user_sessions'][user_id]['waiting_for_answer'] = False
            
            await update.message.reply_text(
                "üìù –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç! –ü—Ä–∞–∫—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n"
                "–£–≤–∏–¥–∏–º—Å—è –∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º –≤ 8:00! üåÖ"
            )
        else:
            await update.message.reply_text(
                "–ü—Ä–∏–≤–µ—Ç! –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥–æ–π /listen –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ üéß –ù–∞—á–∞—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É"
            )
    
    async def save_voice_answer(self, session_id: str, file_id: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç"""
        update_data = {
            'what_heard_audio_file_id': file_id,
            'status': 'completed',
            'completed_at': datetime.now().isoformat()
        }
        
        api_url = f"{self.supabase_url}/rest/v1/listening_sessions?id=eq.{session_id}"
        
        try:
            response = requests.patch(api_url, headers=self.headers, data=json.dumps(update_data))
            if response.status_code == 204:
                logger.info(f"–ì–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")
    
    async def save_text_answer(self, session_id: str, text: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç"""
        update_data = {
            'what_heard_text': text,
            'status': 'completed',
            'completed_at': datetime.now().isoformat()
        }
        
        api_url = f"{self.supabase_url}/rest/v1/listening_sessions?id=eq.{session_id}"
        
        try:
            response = requests.patch(api_url, headers=self.headers, data=json.dumps(update_data))
            if response.status_code == 204:
                logger.info(f"–¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")
    
    async def complete_session(self, session_id: str):
        """–ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é"""
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞
        pass
    
    async def show_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        stats = await self.get_user_stats(user_id)
        
        text = f"""
üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∞–∫—Ç–∏–∫:

üéß –í—Å–µ–≥–æ –ø—Ä–∞–∫—Ç–∏–∫: {stats['total_sessions']}
‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {stats['completed_sessions']}
üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–∞–∫—Ç–∏–∫–∞: {stats['last_session_date'] or '–ï—â–µ –Ω–µ –±—ã–ª–æ'}

üî• –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!
        """
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üéß –ù–∞—á–∞—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É", callback_data="start_practice")]
        ])
        
        await update.message.reply_text(text, reply_markup=keyboard)
    
    async def show_stats_from_callback(self, query, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ callback"""
        user_id = query.from_user.id
        stats = await self.get_user_stats(user_id)
        
        text = f"""
üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∞–∫—Ç–∏–∫:

üéß –í—Å–µ–≥–æ –ø—Ä–∞–∫—Ç–∏–∫: {stats['total_sessions']}
‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {stats['completed_sessions']}
üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–∞–∫—Ç–∏–∫–∞: {stats['last_session_date'] or '–ï—â–µ –Ω–µ –±—ã–ª–æ'}

üî• –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!
        """
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üéß –ù–∞—á–∞—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É", callback_data="start_practice")]
        ])
        
        await query.edit_message_text(text, reply_markup=keyboard)
    
    async def show_how_it_works(self, query, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç"""
        text = """
‚ÑπÔ∏è –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç Deep Listening Bot:

üåÖ **–£—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ**
–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00 —É—Ç—Ä–∞ —è –ø—Ä–∏—à–ª—é –≤–∞–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ

üéß **1 –º–∏–Ω—É—Ç–∞ —Å–ª—É—à–∞–Ω–∏—è**  
–ù–∞–π–¥–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –º–µ—Å—Ç–æ –∏ —Å–ª—É—à–∞–π—Ç–µ –∑–≤—É–∫–∏ –≤–æ–∫—Ä—É–≥

ü§î **–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –æ–ø—ã—Ç–æ–º**
–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ —É—Å–ª—ã—à–∞–ª–∏ - —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–º

üìä **–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å**
–°–º–æ—Ç—Ä–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∞—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫

–≠—Ç–æ –ø—Ä–æ—Å—Ç–∞—è, –Ω–æ –º–æ—â–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏! üßò‚Äç‚ôÄÔ∏è
        """
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üéß –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data="start_practice")]
        ])
        
        await query.edit_message_text(text, reply_markup=keyboard)
    
    async def get_user_stats(self, user_id: int) -> dict:
        """–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        api_url = f"{self.supabase_url}/rest/v1/listening_sessions?user_id=eq.{user_id}&select=*"
        
        try:
            response = requests.get(api_url, headers=self.headers)
            if response.status_code == 200:
                sessions = response.json()
                
                total_sessions = len(sessions)
                completed_sessions = len([s for s in sessions if s['status'] == 'completed'])
                
                last_session_date = None
                if sessions:
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é
                    sessions.sort(key=lambda x: x['created_at'], reverse=True)
                    last_session_date = sessions[0]['session_date']
                
                return {
                    'total_sessions': total_sessions,
                    'completed_sessions': completed_sessions,
                    'last_session_date': last_session_date
                }
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response.status_code}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        
        return {
            'total_sessions': 0,
            'completed_sessions': 0,
            'last_session_date': None
        }
    
    async def send_morning_reminders(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Ç—Ä–µ–Ω–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é)"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
        api_url = f"{self.supabase_url}/rest/v1/listening_users?morning_reminder_enabled=eq.true&select=telegram_user_id,first_name"
        
        try:
            response = requests.get(api_url, headers=self.headers)
            if response.status_code == 200:
                users = response.json()
                
                for user in users:
                    user_id = user['telegram_user_id']
                    first_name = user['first_name'] or '–¥—Ä—É–≥'
                    
                    text = f"""
üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, {first_name}!

–í—Ä–µ–º—è –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–π –ø—Ä–∞–∫—Ç–∏–∫–∏ –≥–ª—É–±–æ–∫–æ–≥–æ —Å–ª—É—à–∞–Ω–∏—è.

üéß –í—Å–µ–≥–æ 1 –º–∏–Ω—É—Ç–∞ - –ø–æ—Å–ª—É—à–∞–π—Ç–µ –º–∏—Ä –≤–æ–∫—Ä—É–≥ –≤–∞—Å
ü§î –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Ç–µ–º, —á—Ç–æ —É—Å–ª—ã—à–∞–ª–∏

–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –¥–µ–Ω—å –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ?
                    """
                    
                    keyboard = InlineKeyboardMarkup([
                        [InlineKeyboardButton("üéß –ù–∞—á–∞—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É", callback_data="start_practice")],
                        [InlineKeyboardButton("‚è∞ –ù–∞–ø–æ–º–Ω–∏—Ç—å –ø–æ–∑–∂–µ", callback_data="remind_later")]
                    ])
                    
                    try:
                        await self.application.bot.send_message(
                            chat_id=user_id,
                            text=text,
                            reply_markup=keyboard
                        )
                        logger.info(f"–£—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º Simple Deep Listening Bot...")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É—Ç—Ä–µ–Ω–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ 8:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
        # (–í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ —á–µ—Ä–µ–∑ cron –∏–ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á)
        
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        bot = SimpleListeningBot()
        bot.run()
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    main()
