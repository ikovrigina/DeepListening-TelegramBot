#!/usr/bin/env python3
"""
Simple Deep Listening Bot - MVP –≤–µ—Ä—Å–∏—è

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
- –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ —Å–ª—É—à–∞–Ω–∏—è (–≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è)
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏
- –í–æ–ø—Ä–æ—Å "–ß—Ç–æ —Ç—ã —É—Å–ª—ã—à–∞–ª?"
- –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ü–∏–∫–ª: –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–∞–∫—Ç–∏–∫—É
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ (—Ç–µ–∫—Å—Ç –∏–ª–∏ –∞—É–¥–∏–æ)
"""

import os
import logging
import asyncio
import io
from datetime import datetime, time, timedelta
from typing import Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from dotenv import load_dotenv
from openai import OpenAI
import requests
import json

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class SimpleListeningBot:
    def __init__(self):
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.supabase_url = os.getenv('SUPABASE_URL')
        self.supabase_key = os.getenv('SUPABASE_ANON_KEY')
        self.openai_api_key = os.getenv('OPENAI_API_KEY')
        
        if not all([self.bot_token, self.supabase_url, self.supabase_key]):
            raise ValueError("–ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")

        # OpenAI –∫–ª–∏–µ–Ω—Ç (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø—É—Å–∫–∞, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ)
        self.openai_client: OpenAI | None = None
        if self.openai_api_key:
            os.environ['OPENAI_API_KEY'] = self.openai_api_key
            try:
                self.openai_client = OpenAI()
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å OpenAI: {e}")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è Supabase API
        self.headers = {
            'apikey': self.supabase_key,
            'Authorization': f'Bearer {self.supabase_key}',
            'Content-Type': 'application/json',
            'Prefer': 'return=minimal'
        }
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞ —Å JobQueue
        self.application = Application.builder().token(self.bot_token).build()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º JobQueue –¥–ª—è —Ç–∞–π–º–µ—Ä–æ–≤
        from telegram.ext import JobQueue
        if not self.application.job_queue:
            self.application.job_queue = JobQueue()
            self.application.job_queue.set_application(self.application)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("listen", self.start_listening))
        self.application.add_handler(CommandHandler("stats", self.show_stats))
        self.application.add_handler(CommandHandler("library", self.show_library))
        
        # Callback –∫–Ω–æ–ø–∫–∏
        self.application.add_handler(CallbackQueryHandler(self.button_handler))
        
        # –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.application.add_handler(MessageHandler(filters.VOICE, self.handle_voice))
        
        # –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        self.application.add_handler(MessageHandler(filters.PHOTO, self.handle_photo))
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await self.register_user(user.id, user.username, user.first_name)
        
        welcome_text = """
üéß –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Deep Listening Bot!

–ü—Ä–∏–≥–ª–∞—à–∞—é —Ç–µ–±—è –Ω–∞—á–∞—Ç—å —Ç–≤–æ—é –ø—Ä–∞–∫—Ç–∏–∫—É —Å–ª—É—à–∞–Ω–∏—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–≤–∏—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Å–ª—É—à–∞–Ω–∏—è.

–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?
        """
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üéß –ß—Ç–æ —Ç—ã —Å–ª—ã—à–∏—à—å —Ç–µ–ø–µ—Ä—å?", callback_data="start_practice")],
            [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç", callback_data="how_it_works")]
        ])
        
        await update.message.reply_text(welcome_text, reply_markup=keyboard)
    
    async def register_user(self, user_id: int, username: str, first_name: str):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_data = {
            'telegram_user_id': user_id,
            'username': username,
            'first_name': first_name,
            'morning_reminder_enabled': True,
            'morning_time': '08:00:00',
            'timezone': 'UTC'
        }
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º upsert –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        api_url = f"{self.supabase_url}/rest/v1/listening_users"
        headers = {**self.headers, 'Prefer': 'resolution=merge-duplicates'}
        
        try:
            response = requests.post(api_url, headers=headers, data=json.dumps(user_data))
            if response.status_code in [200, 201]:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {response.status_code} - {response.text}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    async def start_listening(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∏–Ω–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è"""
        user_id = update.effective_user.id
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
        session_id = await self.create_listening_session(user_id)
        if session_id:
            context.user_data['current_session'] = session_id
            
            text = """
üéß –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∞–∫—Ç–∏–∫—É –≥–ª—É–±–æ–∫–æ–≥–æ —Å–ª—É—à–∞–Ω–∏—è!

üìç –ù–∞–π–¥–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –º–µ—Å—Ç–æ
üì± –ù–∞–∂–º–∏ –∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–π –∫–Ω–æ–ø–∫—É –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
üëÇ –†–∞—Å—Å–ª–∞–±—å—Å—è, —Å–¥–µ–ª–∞–π 3 –≥–ª—É–±–æ–∫–∏—Ö –≤–¥–æ—Ö–∞ –∏ –ø—Ä–∏–∫—Ä–æ–π –≥–ª–∞–∑–∞
‚è∞ –°–ª—É—à–∞–π –≤—Å–µ –∑–≤—É–∫–∏ –≤–æ–∫—Ä—É–≥ —Å—Ç–æ–ª—å–∫–æ, —Å–∫–æ–ª—å–∫–æ –∑–∞—Ö–æ—á–µ—Ç—Å—è
            """
            
            msg = await update.message.reply_text(text)
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π query –¥–ª—è start_timer
            class FakeQuery:
                def __init__(self, message, user):
                    self.message = message
                    self.from_user = user
            
            fake_query = FakeQuery(msg, update.effective_user)
            await self.start_timer(fake_query, context)
        else:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def create_listening_session(self, user_id: int) -> Optional[str]:
        """–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è"""
        session_data = {
            'user_id': user_id,
            'session_date': datetime.now().date().isoformat(),
            'session_time': datetime.now().time().isoformat(),
            'status': 'started'
        }
        
        api_url = f"{self.supabase_url}/rest/v1/listening_sessions"
        headers = {**self.headers, 'Prefer': 'return=representation'}
        
        try:
            response = requests.post(api_url, headers=headers, data=json.dumps(session_data))
            if response.status_code in [200, 201]:
                result = response.json()
                if result and len(result) > 0:
                    return result[0]['id']
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {response.status_code} - {response.text}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
        
        return None
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        try:
            await query.answer()
        except Exception:
            pass
        
        if query.data == "start_practice":
            await self.start_listening_from_callback(query, context)
        elif query.data == "show_stats":
            await self.show_stats_from_callback(query, context)
        elif query.data == "how_it_works":
            await self.show_how_it_works(query, context)
        elif query.data.startswith("lib:play:"):
            await self.library_play_audio(query, context)
        elif query.data.startswith("lib:page:"):
            await self.show_library_from_callback(query, context)
    
    async def start_listening_from_callback(self, query, context):
        """–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∏–∑ callback"""
        user_id = query.from_user.id
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
        session_id = await self.create_listening_session(user_id)
        if session_id:
            context.user_data['current_session'] = session_id
            
            text = """
üéß –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∞–∫—Ç–∏–∫—É –≥–ª—É–±–æ–∫–æ–≥–æ —Å–ª—É—à–∞–Ω–∏—è!

üìç –ù–∞–π–¥–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –º–µ—Å—Ç–æ
üì± –ù–∞–∂–º–∏ –∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–π –∫–Ω–æ–ø–∫—É –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
üëÇ –†–∞—Å—Å–ª–∞–±—å—Å—è, —Å–¥–µ–ª–∞–π 3 –≥–ª—É–±–æ–∫–∏—Ö –≤–¥–æ—Ö–∞ –∏ –ø—Ä–∏–∫—Ä–æ–π –≥–ª–∞–∑–∞
‚è∞ –°–ª—É—à–∞–π –≤—Å–µ –∑–≤—É–∫–∏ –≤–æ–∫—Ä—É–≥ —Å—Ç–æ–ª—å–∫–æ, —Å–∫–æ–ª—å–∫–æ –∑–∞—Ö–æ—á–µ—Ç—Å—è
            """
            
            await query.edit_message_text(text)
            
            # –°—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
            await self.start_timer(query, context)
    
    async def start_timer(self, query, context):
        """–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∞–∫—Ç–∏–∫—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –≤—Ä–µ–º–µ–Ω–∏"""
        timer_msg = await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="üéß –ü—Ä–∞–∫—Ç–∏–∫–∞ –∏–¥–µ—Ç...\n\n"
                 "üëÇ –°–ª—É—à–∞–π –∑–≤—É–∫–∏ –≤–æ–∫—Ä—É–≥ ...\n"
                 "‚è∞ –í—Ä–µ–º—è: 00:00"
        )
        
        # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å
        if 'user_sessions' not in context.bot_data:
            context.bot_data['user_sessions'] = {}
        
        user_id = query.from_user.id
        if user_id not in context.bot_data['user_sessions']:
            context.bot_data['user_sessions'][user_id] = {}
        
        context.bot_data['user_sessions'][user_id].update({
            'should_be_recording': True,
            'session_id': context.user_data.get('current_session'),
            'start_time': datetime.now(),
            'timer_message_id': timer_msg.message_id,
            'instruction_message_id': None
        })
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥)
        context.job_queue.run_repeating(
            self.update_visual_timer,
            interval=15,
            first=15,
            chat_id=query.message.chat_id,
            user_id=query.from_user.id,
            data={'session_id': context.user_data.get('current_session')},
            name=f"timer_{user_id}"
        )
    
    async def update_visual_timer(self, context: ContextTypes.DEFAULT_TYPE):
        """–û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥"""
        chat_id = context.job.chat_id
        user_id = context.job.user_id
        
        user_session = context.bot_data.get('user_sessions', {}).get(user_id, {})
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        if not user_session.get('should_be_recording'):
            context.job.schedule_removal()
            return
            
        start_time = user_session.get('start_time')
        if not start_time:
            return
            
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è
        elapsed = datetime.now() - start_time
        minutes = int(elapsed.total_seconds() // 60)
        seconds = int(elapsed.total_seconds() % 60)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–π–º–µ—Ä–æ–º
        timer_message_id = user_session.get('timer_message_id')
        if timer_message_id:
            try:
                await context.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=timer_message_id,
                    text=f"üéß –ü—Ä–∞–∫—Ç–∏–∫–∞ –∏–¥–µ—Ç...\n\n"
                         f"üëÇ –°–ª—É—à–∞–π –∑–≤—É–∫–∏ –≤–æ–∫—Ä—É–≥ ...\n"
                         f"‚è∞ –í—Ä–µ–º—è: {minutes:02d}:{seconds:02d}"
                )
            except Exception as e:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                pass

    async def recording_finished(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–æ–Ω—á–∏–ª –∑–∞–ø–∏—Å—å - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É"""
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        current_jobs = context.job_queue.get_jobs_by_name(f"timer_{user_id}")
        for job in current_jobs:
            job.schedule_removal()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
        user_session = context.bot_data.get('user_sessions', {}).get(user_id, {})
        start_time = user_session.get('start_time')
        if start_time:
            elapsed = datetime.now() - start_time
            minutes = int(elapsed.total_seconds() // 60)
            seconds = int(elapsed.total_seconds() % 60)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
            timer_message_id = user_session.get('timer_message_id')
            if timer_message_id:
                try:
                    await context.bot.edit_message_text(
                        chat_id=chat_id,
                        message_id=timer_message_id,
                        text=f"‚úÖ –ü—Ä–∞–∫—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                             f"üëÇ –¢—ã —Å–ª—É—à–∞–ª: {minutes:02d}:{seconds:02d}\n"
                             f"üéôÔ∏è –ê—É–¥–∏–æ –ø–æ–ª—É—á–µ–Ω–æ!"
                    )
                except Exception:
                    pass
        
        # –£–±–∏—Ä–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        instruction_message_id = user_session.get('instruction_message_id')
        if instruction_message_id:
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=instruction_message_id)
            except Exception:
                pass
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É
        await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
        
        text = """
ü§î –ß—Ç–æ —Ç—ã —É—Å–ª—ã—à–∞–ª?

–û–ø–∏—à–∏ –∑–≤—É–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–º–µ—Ç–∏–ª –≤–æ –≤—Ä–µ–º—è –ø—Ä–∞–∫—Ç–∏–∫–∏:

üìù –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–º
üéôÔ∏è –ò–ª–∏ –∑–∞–ø–∏—à–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
–ü—Ä–∏–ª–æ–∂–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å
        """
        
        await context.bot.send_message(chat_id=chat_id, text=text)
    
    async def handle_voice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        file_id = update.message.voice.file_id
        duration = update.message.voice.duration
        
        user_session = context.bot_data.get('user_sessions', {}).get(user_id, {})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –º—ã –∂–¥–µ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_session.get('should_be_recording') and not user_session.get('waiting_for_answer'):
            # –≠—Ç–æ –∞—É–¥–∏–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –ø—Ä–∞–∫—Ç–∏–∫–∏ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–æ–Ω—á–∏–ª —Å–ª—É—à–∞—Ç—å
            session_id = user_session['session_id']
            message_id = update.message.message_id
            await self.save_environment_audio(session_id, file_id, duration, message_id)
            
            # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –∞—É–¥–∏–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –ø—Ä–∞–∫—Ç–∏–∫–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞
            context.bot_data['user_sessions'][user_id].update({
                'received_environment_audio': True,
                'should_be_recording': False,
                'waiting_for_answer': True
            })
            
            # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
            await self.recording_finished(update, context)
            
        elif user_session.get('waiting_for_answer'):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–ª–æ—Å–æ–≤—É—é —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
            session_id = user_session['session_id']
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ
            transcription = await self.transcribe_audio(file_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π
            await self.save_voice_answer_with_transcription(session_id, file_id, transcription)
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
            await self.complete_session(session_id)
            
            # –£–±–∏—Ä–∞–µ–º –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è
            context.bot_data['user_sessions'][user_id]['waiting_for_answer'] = False
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è (–±–µ–∑ "–ú–æ–∏ –∑–∞–ø–∏—Å–∏")
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üéß –ß—Ç–æ —Ç—ã —Å–ª—ã—à–∏—à—å —Ç–µ–ø–µ—Ä—å?", callback_data="start_practice")],
                [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],
                [InlineKeyboardButton("‚ÑπÔ∏è –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç", callback_data="how_it_works")]
            ])
            
            await update.message.reply_text(
                "üéôÔ∏è –°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ, —á—Ç–æ —Ç—ã –ø–æ–¥–µ–ª–∏–ª—Å—è!",
                reply_markup=keyboard
            )
        else:
            await update.message.reply_text(
                "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ –ø—Ä–∞–∫—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥–æ–π /listen –∏–ª–∏ –Ω–∞–∂–º–∏ üéß –ß—Ç–æ —Ç—ã —Å–ª—ã—à–∏—à—å —Ç–µ–ø–µ—Ä—å?"
            )
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥–µ–º –ª–∏ –º—ã –æ—Ç–≤–µ—Ç –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (context.bot_data.get('user_sessions', {}).get(user_id, {}).get('waiting_for_answer')):
            session_id = context.bot_data['user_sessions'][user_id]['session_id']
            text_answer = update.message.text
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            await self.save_text_answer(session_id, text_answer)
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
            await self.complete_session(session_id)
            
            # –£–±–∏—Ä–∞–µ–º –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è
            context.bot_data['user_sessions'][user_id]['waiting_for_answer'] = False
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è (–±–µ–∑ "–ú–æ–∏ –∑–∞–ø–∏—Å–∏")
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üéß –ß—Ç–æ —Ç—ã —Å–ª—ã—à–∏—à—å —Ç–µ–ø–µ—Ä—å?", callback_data="start_practice")],
                [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],
                [InlineKeyboardButton("‚ÑπÔ∏è –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç", callback_data="how_it_works")]
            ])
            
            await update.message.reply_text(
                "üìù –°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ, —á—Ç–æ —Ç—ã –ø–æ–¥–µ–ª–∏–ª—Å—è!",
                reply_markup=keyboard
            )
        else:
            await update.message.reply_text(
                "–ü—Ä–∏–≤–µ—Ç! –ù–∞—á–Ω–∏ –ø—Ä–∞–∫—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥–æ–π /listen –∏–ª–∏ –Ω–∞–∂–º–∏ üéß –ß—Ç–æ —Ç—ã —Å–ª—ã—à–∏—à—å —Ç–µ–ø–µ—Ä—å?"
            )
    
    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥–µ–º –ª–∏ –º—ã –æ—Ç–≤–µ—Ç –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (context.bot_data.get('user_sessions', {}).get(user_id, {}).get('waiting_for_answer')):
            session_id = context.bot_data['user_sessions'][user_id]['session_id']
            
            # –ü–æ–ª—É—á–∞–µ–º file_id —Å–∞–º–æ–π –±–æ–ª—å—à–æ–π –≤–µ—Ä—Å–∏–∏ —Ñ–æ—Ç–æ
            photo = update.message.photo[-1]
            photo_file_id = photo.file_id
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
            caption = update.message.caption or ""
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –∏ –ø–æ–¥–ø–∏—Å—å
            await self.save_photo_answer(session_id, photo_file_id, caption)
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
            await self.complete_session(session_id)
            
            # –£–±–∏—Ä–∞–µ–º –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è
            context.bot_data['user_sessions'][user_id]['waiting_for_answer'] = False
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è (–±–µ–∑ "–ú–æ–∏ –∑–∞–ø–∏—Å–∏")
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üéß –ß—Ç–æ —Ç—ã —Å–ª—ã—à–∏—à—å —Ç–µ–ø–µ—Ä—å?", callback_data="start_practice")],
                [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],
                [InlineKeyboardButton("‚ÑπÔ∏è –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç", callback_data="how_it_works")]
            ])
            
            await update.message.reply_text(
                "üì∏ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ, —á—Ç–æ —Ç—ã –ø–æ–¥–µ–ª–∏–ª—Å—è!",
                reply_markup=keyboard
            )
        else:
            await update.message.reply_text(
                "–ü—Ä–∏–≤–µ—Ç! –ù–∞—á–Ω–∏ –ø—Ä–∞–∫—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥–æ–π /listen –∏–ª–∏ –Ω–∞–∂–º–∏ üéß –ß—Ç–æ —Ç—ã —Å–ª—ã—à–∏—à—å —Ç–µ–ø–µ—Ä—å?"
            )
    
    async def save_voice_answer(self, session_id: str, file_id: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç"""
        update_data = {
            'what_heard_audio_file_id': file_id,
            'status': 'completed',
            'completed_at': datetime.now().isoformat()
        }
        
        api_url = f"{self.supabase_url}/rest/v1/listening_sessions?id=eq.{session_id}"
        
        try:
            response = requests.patch(api_url, headers=self.headers, data=json.dumps(update_data))
            if response.status_code == 204:
                logger.info(f"–ì–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")
    
    async def save_voice_answer_with_transcription(self, session_id: str, file_id: str, transcription: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç –∏ —Ç–µ–∫—Å—Ç –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è —Å–µ—Å—Å–∏–∏."""
        # –ü–∏—à–µ–º —Ç–æ–ª—å–∫–æ –≤ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è
        update_data = {
            'what_heard_text': transcription,
            'status': 'completed',
            'completed_at': datetime.now().isoformat()
        }
        
        api_url = f"{self.supabase_url}/rest/v1/listening_sessions?id=eq.{session_id}"
        
        try:
            response = requests.patch(api_url, headers=self.headers, data=json.dumps(update_data))
            if response.status_code == 204:
                logger.info(f"–¢–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")

                # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ-–æ—Ç–≤–µ—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
                await self.save_audio_metadata(session_id, file_id, 'reflection')
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {response.status_code}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
    
    async def save_text_answer(self, session_id: str, text: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç"""
        update_data = {
            'what_heard_text': text,
            'status': 'completed',
            'completed_at': datetime.now().isoformat()
        }
        
        api_url = f"{self.supabase_url}/rest/v1/listening_sessions?id=eq.{session_id}"
        
        try:
            response = requests.patch(api_url, headers=self.headers, data=json.dumps(update_data))
            if response.status_code == 204:
                logger.info(f"–¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")
    
    async def save_photo_answer(self, session_id: str, photo_file_id: str, caption: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é"""
        update_data = {
            'photo_file_id': photo_file_id,
            'what_heard_text': caption if caption else "[–§–æ—Ç–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏]",
            'status': 'completed',
            'completed_at': datetime.now().isoformat()
        }
        
        api_url = f"{self.supabase_url}/rest/v1/listening_sessions?id=eq.{session_id}"
        
        try:
            response = requests.patch(api_url, headers=self.headers, data=json.dumps(update_data))
            if response.status_code == 204:
                logger.info(f"–§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ: {response.status_code}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
    
    async def complete_session(self, session_id: str):
        """–ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é"""
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞
        pass
    
    async def show_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        stats = await self.get_user_stats(user_id)
        
        text = f"""
üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∞–∫—Ç–∏–∫:

üéß –í—Å–µ–≥–æ –ø—Ä–∞–∫—Ç–∏–∫: {stats['total_sessions']}
‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {stats['completed_sessions']}
üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–∞–∫—Ç–∏–∫–∞: {stats['last_session_date'] or '–ï—â–µ –Ω–µ –±—ã–ª–æ'}

üî• –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!
        """
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üéß –ß—Ç–æ —Ç—ã —Å–ª—ã—à–∏—à—å —Ç–µ–ø–µ—Ä—å?", callback_data="start_practice")],
            [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç", callback_data="how_it_works")]
        ])
        
        await update.message.reply_text(text, reply_markup=keyboard)
    
    async def show_stats_from_callback(self, query, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ callback"""
        user_id = query.from_user.id
        stats = await self.get_user_stats(user_id)
        
        text = f"""
üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∞–∫—Ç–∏–∫:

üéß –í—Å–µ–≥–æ –ø—Ä–∞–∫—Ç–∏–∫: {stats['total_sessions']}
‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {stats['completed_sessions']}
üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–∞–∫—Ç–∏–∫–∞: {stats['last_session_date'] or '–ï—â–µ –Ω–µ –±—ã–ª–æ'}

üî• –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!
        """
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üéß –ß—Ç–æ —Ç—ã —Å–ª—ã—à–∏—à—å —Ç–µ–ø–µ—Ä—å?", callback_data="start_practice")],
            [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç", callback_data="how_it_works")]
        ])
        
        await query.edit_message_text(text, reply_markup=keyboard)

    # ===== Library (—Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π) =====
    async def show_library(self, update: Update, context: ContextTypes.DEFAULT_TYPE, page: int = 1):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        user_id = update.effective_user.id
        await self._render_library(chat_id=update.effective_chat.id, user_id=user_id, page=page, edit_message_id=None, context=context)

    async def show_library_from_callback(self, query, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –∏–∑ callback —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
        user_id = query.from_user.id
        try:
            parts = query.data.split(":")  # lib:page:<n>
            page = int(parts[2]) if len(parts) > 2 else 1
            if page < 1:
                page = 1
        except Exception:
            page = 1
        try:
            await query.answer()
        except Exception:
            pass
        await self._render_library(chat_id=query.message.chat_id, user_id=user_id, page=page, edit_message_id=query.message.message_id, context=context)

    async def _render_library(self, chat_id: int, user_id: int, page: int, edit_message_id: Optional[int], context: ContextTypes.DEFAULT_TYPE):
        PAGE_SIZE = 10
        offset = (page - 1) * PAGE_SIZE

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        sessions_url = (
            f"{self.supabase_url}/rest/v1/listening_sessions"
            f"?user_id=eq.{user_id}&select=id,created_at,session_duration_seconds,what_heard_text"
            f"&order=created_at.desc&limit={PAGE_SIZE}&offset={offset}"
        )
        try:
            resp = requests.get(sessions_url, headers=self.headers)
            if resp.status_code != 200:
                text = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                if edit_message_id:
                    await context.bot.edit_message_text(chat_id=chat_id, message_id=edit_message_id, text=text)
                else:
                    await context.bot.send_message(chat_id=chat_id, text=text)
                return
            sessions = resp.json() or []
        except Exception:
            sessions = []

        if not sessions:
            text = "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥–æ–π /listen"
            if edit_message_id:
                await context.bot.edit_message_text(chat_id=chat_id, message_id=edit_message_id, text=text)
            else:
                await context.bot.send_message(chat_id=chat_id, text=text)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è callback data
        if 'lib_tokens' not in context.bot_data:
            context.bot_data['lib_tokens'] = {}
        lib_tokens = context.bot_data['lib_tokens']

        rows = []
        for s in sessions:
            created_at = s.get("created_at")
            dur = s.get("session_duration_seconds") or 0
            text_answer = s.get("what_heard_text") or ""
            keywords = self._extract_keywords(text_answer)

            # –ò—â–µ–º –∞—É–¥–∏–æ –æ—Ç–≤–µ—Ç–∞ (reflection). –ï—Å–ª–∏ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ (environment)
            file_id = await self._get_session_audio_file_id(s.get("id"), preferred_type="reflection")
            if not file_id:
                file_id = await self._get_session_audio_file_id(s.get("id"), preferred_type="environment")

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            try:
                # created_at —É–∂–µ –≤ ISO, –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É
                dt = datetime.fromisoformat(created_at.replace("Z", "+00:00")) if created_at else datetime.now()
                date_str = dt.strftime("%d.%m.%Y")
            except Exception:
                date_str = "‚Äî"
            mm = int(dur // 60)
            ss = int(dur % 60)
            dur_str = f"{mm:02d}:{ss:02d}"
            kw_str = (", ".join(keywords)) if keywords else "‚Äî"

            label = f"{date_str} ¬∑ {dur_str} ¬∑ {kw_str}"
            if len(label) > 64:
                label = label[:61] + "‚Ä¶"

            if file_id:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–æ–∫–µ–Ω –≤–º–µ—Å—Ç–æ –¥–ª–∏–Ω–Ω–æ–≥–æ file_id (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 64 –±–∞–π—Ç–∞)
                import uuid
                token = uuid.uuid4().hex[:32]
                lib_tokens[token] = {"file_id": file_id, "user_id": user_id}
                rows.append([InlineKeyboardButton(f"‚ñ∂Ô∏è {label}", callback_data=f"lib:play:{token}")])
            else:
                rows.append([InlineKeyboardButton(f"üìù {label}", callback_data=f"lib:page:{page}")])

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        nav = []
        if page > 1:
            nav.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"lib:page:{page-1}"))
        if len(sessions) == PAGE_SIZE:
            nav.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"lib:page:{page+1}"))
        if nav:
            rows.append(nav)

        keyboard = InlineKeyboardMarkup(rows)
        header = "üìö –ú–æ–∏ –∑–∞–ø–∏—Å–∏"
        if edit_message_id:
            try:
                await context.bot.edit_message_text(chat_id=chat_id, message_id=edit_message_id, text=header, reply_markup=keyboard)
            except Exception:
                # –í —Å–ª—É—á–∞–µ "Message is not modified" –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                pass
        else:
            await context.bot.send_message(chat_id=chat_id, text=header, reply_markup=keyboard)

    async def library_play_audio(self, query, context):
        """–ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ file_id."""
        try:
            token = query.data.split(":")[2]
        except Exception:
            try:
                await query.answer()
            except Exception:
                pass
            return
        try:
            await query.answer()
        except Exception:
            pass

        # –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–∫–µ–Ω –≤ file_id
        file_id = None
        meta = context.bot_data.get('lib_tokens', {}).get(token)
        if isinstance(meta, dict):
            file_id = meta.get('file_id')

        if not file_id:
            await context.bot.send_message(chat_id=query.message.chat_id, text="–°—Å—ã–ª–∫–∞ –Ω–∞ –∞—É–¥–∏–æ —É—Å—Ç–∞—Ä–µ–ª–∞. –û–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫ /library")
            return

        try:
            await context.bot.send_voice(chat_id=query.message.chat_id, voice=file_id)
        except Exception:
            await context.bot.send_message(chat_id=query.message.chat_id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ")

    async def _get_session_audio_file_id(self, session_id: str, preferred_type: str) -> Optional[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç telegram_file_id –∏–∑ audio_files –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ –∏ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞."""
        url = (
            f"{self.supabase_url}/rest/v1/audio_files"
            f"?session_id=eq.{session_id}&file_type=eq.{preferred_type}&select=telegram_file_id&limit=1"
        )
        try:
            r = requests.get(url, headers=self.headers)
            if r.status_code == 200:
                arr = r.json() or []
                if arr:
                    return arr[0].get("telegram_file_id")
        except Exception:
            pass
        return None

    def _extract_keywords(self, text: str, max_words: int = 5) -> list[str]:
        """–û—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞."""
        if not text:
            return []
        text_l = text.lower()
        # –ø—Ä–æ—Å—Ç–æ–π –Ω–∞–±–æ—Ä —Å—Ç–æ–ø-—Å–ª–æ–≤ (ru/en)
        stop = {
            "–∏","–≤","–Ω–∞","—á—Ç–æ","—ç—Ç–æ","–∫–∞–∫","—è","–º—ã","–æ–Ω","–æ–Ω–∞","–æ–Ω–∏","–æ–Ω–æ","–∞","–Ω–æ","–∏–ª–∏","–∫","—É","–∏–∑","–∑–∞","–¥–ª—è","–ø–æ","—Å","—Å–æ","–∂–µ","–ª–∏","–Ω–µ","–¥–∞","—Ç–æ","the","a","an","and","or","of","to","in","on","at","is","are","was","were","be","been","being"
        }
        # –≥—Ä—É–±–æ–µ —Ç–æ–∫–µ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
        words = [w.strip(",.;:!?()[]{}\"'¬ª¬´‚Äì‚Äî") for w in text_l.split()]
        words = [w for w in words if w and w not in stop and w.isalpha() and len(w) > 2]
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –ø–æ—è–≤–ª–µ–Ω–∏—è, —É–¥–∞–ª—è—è –¥—É–±–ª–∏–∫–∞—Ç—ã
        seen = set()
        uniq = []
        for w in words:
            if w not in seen:
                seen.add(w)
                uniq.append(w)
            if len(uniq) >= max_words:
                break
        return uniq
    
    async def show_how_it_works(self, query, context):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç"""
        text = """
‚ÑπÔ∏è –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç Deep Listening Bot:

üéß **–ü—Ä–∞–∫—Ç–∏–∫–∞ —Å–ª—É—à–∞–Ω–∏—è**  
–ù–∞–π–¥–∏ —É–¥–æ–±–Ω–æ–µ –º–µ—Å—Ç–æ –∏ —Å–ª—É—à–∞–π –∑–≤—É–∫–∏ –≤–æ–∫—Ä—É–≥

ü§î **–ü–æ–¥–µ–ª–∏—Å—å –æ–ø—ã—Ç–æ–º**
–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —É—Å–ª—ã—à–∞–ª - —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–º

üîÑ **–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ü–∏–∫–ª**
–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —è –ø—Ä–∏–≥–ª–∞—à–∞—é —Ç–µ–±—è –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–∞–∫—Ç–∏–∫—É

üìä **–û—Ç—Å–ª–µ–∂–∏–≤–∞–π –ø—Ä–æ–≥—Ä–µ—Å—Å**
–°–º–æ—Ç—Ä–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–≤–æ–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫

–≠—Ç–æ –ø—Ä–æ—Å—Ç–∞—è, –Ω–æ –º–æ—â–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏! üßò‚Äç‚ôÄÔ∏è
        """
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üéß –ß—Ç–æ —Ç—ã —Å–ª—ã—à–∏—à—å —Ç–µ–ø–µ—Ä—å?", callback_data="start_practice")],
            [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç", callback_data="how_it_works")]
        ])
        
        await query.edit_message_text(text, reply_markup=keyboard)
    
    async def get_user_stats(self, user_id: int) -> dict:
        """–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        api_url = f"{self.supabase_url}/rest/v1/listening_sessions?user_id=eq.{user_id}&select=*"
        
        try:
            response = requests.get(api_url, headers=self.headers)
            if response.status_code == 200:
                sessions = response.json()
                
                total_sessions = len(sessions)
                completed_sessions = len([s for s in sessions if s['status'] == 'completed'])
                
                last_session_date = None
                if sessions:
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é
                    sessions.sort(key=lambda x: x['created_at'], reverse=True)
                    last_session_date = sessions[0]['session_date']
                
                return {
                    'total_sessions': total_sessions,
                    'completed_sessions': completed_sessions,
                    'last_session_date': last_session_date
                }
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response.status_code}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        
        return {
            'total_sessions': 0,
            'completed_sessions': 0,
            'last_session_date': None
        }
    
    async def prompt_environment_recording(self, query, context):
        """–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–ø–∏—Å–∞—Ç—å –∞—É–¥–∏–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        text = """
üéôÔ∏è –ó–∞–ø–∏—Å—å –∑–≤—É–∫–æ–≤ –æ–∫—Ä—É–∂–µ–Ω–∏—è

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å –∑–≤—É–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Å–ª—ã—à–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.

–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–∑–∂–µ –≤—Å–ø–æ–º–Ω–∏—Ç—å –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –º–æ–º–µ–Ω—Ç–∞!
        """
        
        await query.answer()
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=text
        )
        
        # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –∂–¥–µ–º –∞—É–¥–∏–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if 'user_sessions' not in context.bot_data:
            context.bot_data['user_sessions'] = {}
        
        user_id = query.from_user.id
        if user_id not in context.bot_data['user_sessions']:
            context.bot_data['user_sessions'][user_id] = {}
        
        context.bot_data['user_sessions'][user_id]['waiting_for_environment_audio'] = True
        context.bot_data['user_sessions'][user_id]['session_id'] = context.user_data.get('current_session')
    
    async def save_environment_audio(self, session_id: str, file_id: str, duration: int = None, message_id: int = None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        update_data = {
            'environment_audio_file_id': file_id
        }
        
        if duration:
            update_data['session_duration_seconds'] = duration
        
        if message_id:
            update_data['environment_audio_message_id'] = message_id
        
        api_url = f"{self.supabase_url}/rest/v1/listening_sessions?id=eq.{session_id}"
        
        try:
            response = requests.patch(api_url, headers=self.headers, data=json.dumps(update_data))
            if response.status_code == 204:
                logger.info(f"–ê—É–¥–∏–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")
                
                # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É audio_files
                await self.save_audio_metadata(session_id, file_id, 'environment', duration)
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {response.status_code}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞—É–¥–∏–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
    
    async def save_audio_metadata(self, session_id: str, file_id: str, file_type: str, duration: int = None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞"""
        audio_data = {
            'session_id': session_id,
            'file_type': file_type,
            'telegram_file_id': file_id,
            'duration_seconds': duration,
            'created_at': datetime.now().isoformat()
        }
        
        api_url = f"{self.supabase_url}/rest/v1/audio_files"
        
        try:
            response = requests.post(api_url, headers=self.headers, data=json.dumps(audio_data))
            if response.status_code in [200, 201]:
                logger.info(f"–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {file_type} –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∞—É–¥–∏–æ: {response.status_code}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∞—É–¥–∏–æ: {e}")
    
    async def transcribe_audio(self, file_id: str) -> str:
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ OpenAI Whisper. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –∏–ª–∏ –∑–∞–≥–ª—É—à–∫—É."""
        if not self.openai_client:
            logger.warning("OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞—é –∑–∞–≥–ª—É—à–∫—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
            return "[–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞]"

        try:
            # 1) –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ Telegram
            get_file_url = f"https://api.telegram.org/bot{self.bot_token}/getFile"
            r = requests.get(get_file_url, params={"file_id": file_id}, timeout=30)
            r.raise_for_status()
            file_path = r.json()["result"]["file_path"]

            # 2) –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file_url = f"https://api.telegram.org/file/bot{self.bot_token}/{file_path}"
            audio_resp = requests.get(file_url, timeout=60)
            audio_resp.raise_for_status()

            audio_bytes = io.BytesIO(audio_resp.content)
            audio_bytes.name = os.path.basename(file_path) or "voice.ogg"

            # 3) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ OpenAI Whisper
            res = self.openai_client.audio.transcriptions.create(
                model="whisper-1",
                file=audio_bytes,
                response_format="text"
            )

            text = res if isinstance(res, str) else getattr(res, "text", "").strip()
            if not text:
                text = "[—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –±–µ–∑ —Ç–µ–∫—Å—Ç–∞]"

            return text
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —á–µ—Ä–µ–∑ OpenAI: {e}")
            return "[–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∞—É–¥–∏–æ]"

    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º Simple Deep Listening Bot...")
        
        # JobQueue –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å application.run_polling()
        
        # –î–ª—è Railway –∏—Å–ø–æ–ª—å–∑—É–µ–º polling —Å drop_pending_updates
        self.application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True
        )

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        bot = SimpleListeningBot()
        bot.run()
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    main()